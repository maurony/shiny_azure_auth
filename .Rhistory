install.packages("mlflow")
mlflow::mlflow_install()
library(mlflow)
with(mlflow_start_run(), {
mlflow_log_param("alpha", 1)
mlflow_log_param("lambda", 1)
})
shiny::runApp('C:/Users/yvesm/OneDrive/Desktop/shiny')
install.packages('shiny')
install.packages("shiny")
install.packages('shinymanager')
shiny::runApp('C:/Users/yvesm/OneDrive/Desktop/shiny')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp()
??plotlyOutput
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
install.packages('shiny')
install.packages("shiny")
shiny::runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
# data.frame with credentials info
credentials <- data.frame(
user = c("yves"),
password = c("yves"),
# comment = c("alsace", "auvergne", "bretagne"), %>%
stringsAsFactors = FALSE
)
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
Sys.getenv('ENDPOINT')
Sys.getenv('END_POINT')
Sys.getenv(x = c("END_POINT"))
Sys.getenv(x = c("END_POINT"))
Sys.getenv(x = c("END_POINT"))
Sys.getenv(x = c("END_POINT"))
Sys.getenv("END_POINT")
print(Sys.getenv("END_POINT_KEY"))
Sys.getenv("END_POINT_KEY")
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv("END_POINT_KEY")
shiny::runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
shiny::runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp()
library(shiny)
library(DT)
library(ggplot2)
library(plotly)
library(shinythemes)
library(shinydashboard)
library(shinymanager)
# load your dependencies
files_sources = list.files('./R', full.names = T)
sapply(files_sources, source)
# inactivity script
inactivity <- "
function idleTimer() {
var t = setTimeout(logout, 120000);
window.onmousemove = resetTimer; // catches mouse movements
window.onmousedown = resetTimer; // catches mouse movements
window.onclick = resetTimer;     // catches mouse clicks
window.onscroll = resetTimer;    // catches scrolling
window.onkeypress = resetTimer;  //catches keyboard actions
function logout() {
window.close();  //close the window
}
function resetTimer() {
clearTimeout(t);
t = setTimeout(logout, 120000);  // time is in milliseconds (1000 is 1 second)
}
}
idleTimer();"
# data.frame with credentials info
credentials <- data.frame(
user = c("yves"),
password = c("yves"),
# comment = c("alsace", "auvergne", "bretagne"), %>%
stringsAsFactors = FALSE
)
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp()
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer/aitrainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
shiny::runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
runApp()
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
require(tidyverse)
setwd("C:/Users/yvesm/Downloads")
data <- read_csv('2019-11-14T155500+0000.csv')
scale <- function(col) {
return((col - mean(col)) / sd(col))
}
pp_data <- data[, -1] %>%
select(
# more or less all variables that show changes
UtcRequestTime,
# pressure variables
#RS_PRESSURE_MAIN_AD,
#RS_PRESSURE_BACKUP_AD,
#RS_PRESSURE_EXP_AD,
#RS_PRESSURE_PILOT_AD,
#,RS_MON_MVi
# flow variables
RS_FLOW_MASS_AD,
RS_FLOW_EXP_AD
#,RS_MON_IE
#,RS_MON_VTi
#,RS_MON_PMEAN
#,RS_PEAK_FLOW
#,RS_MON_PEEP
#,RS_BAROMETRIC_PRESSURE
#,RS_PATIENT_TEMPERATURE
#,RS_MON_PPEAK
#,RS_AMBIENT_AIR_TEMP
#starts_with('RS_FLOW'),
#starts_with('RS_PRESSURE'),
#starts_with('RS_VOLUME'),
#!RS_FLOW_PATTERN
) %>%
mutate(
UtcRequestTime = as.POSIXct(UtcRequestTime, format="%d.%m.%Y %H:%M:%S"),
Seconds = seq.int(from = 30, length.out = NROW(data))
)
plot_data <- pp_data %>%
gather(
key = 'Attribute',
value = 'Measure',
-Seconds,
-UtcRequestTime
) %>%
group_by(
Attribute
) %>%
mutate(
Measure = scale(Measure)
) %>%
ungroup()
ggplot(plot_data, aes(x = Seconds, y = Measure)) +
geom_line() +
xlab(label = plot_data$UtcRequestTime) +
facet_wrap(~Attribute, ncol = 1) +
theme_bw()
require(tidyverse)
setwd("C:/Users/yvesm/Downloads")
data <- read_csv('2019-11-14T155500+0000.csv')
scale <- function(col) {
return((col - mean(col)) / sd(col))
}
pp_data <- data[, -1] %>%
select(
# more or less all variables that show changes
UtcRequestTime,
# pressure variables
#RS_PRESSURE_MAIN_AD,
#RS_PRESSURE_BACKUP_AD,
#RS_PRESSURE_EXP_AD,
#RS_PRESSURE_PILOT_AD,
#RS_MON_MVi,
# flow variables
RS_FLOW_MASS_AD,
RS_FLOW_EXP_AD
#,RS_MON_IE
,RS_MON_VTi
#,RS_MON_PMEAN
#,RS_PEAK_FLOW
#,RS_MON_PEEP
#,RS_BAROMETRIC_PRESSURE
#,RS_PATIENT_TEMPERATURE
#,RS_MON_PPEAK
#,RS_AMBIENT_AIR_TEMP
#starts_with('RS_FLOW'),
#starts_with('RS_PRESSURE'),
#starts_with('RS_VOLUME'),
#!RS_FLOW_PATTERN
) %>%
mutate(
UtcRequestTime = as.POSIXct(UtcRequestTime, format="%d.%m.%Y %H:%M:%S"),
Seconds = seq.int(from = 30, length.out = NROW(data))
)
plot_data <- pp_data %>%
gather(
key = 'Attribute',
value = 'Measure',
-Seconds,
-UtcRequestTime
) %>%
group_by(
Attribute
) %>%
mutate(
Measure = scale(Measure)
) %>%
ungroup()
ggplot(plot_data, aes(x = Seconds, y = Measure)) +
geom_line() +
xlab(label = plot_data$UtcRequestTime) +
facet_wrap(~Attribute, ncol = 1) +
theme_bw()
require(tidyverse)
setwd("C:/Users/yvesm/Downloads")
data <- read_csv('2019-11-14T155500+0000.csv')
scale <- function(col) {
return((col - mean(col)) / sd(col))
}
pp_data <- data[, -1] %>%
select(
# more or less all variables that show changes
UtcRequestTime,
# pressure variables
RS_PRESSURE_MAIN_AD,
RS_PRESSURE_BACKUP_AD,
RS_PRESSURE_EXP_AD,
RS_PRESSURE_PILOT_AD,
RS_MON_MVi,
# flow variables
#RS_FLOW_MASS_AD,
#RS_FLOW_EXP_AD
#,RS_MON_IE
#,RS_MON_VTi
#,RS_MON_PMEAN
#,RS_PEAK_FLOW
#,RS_MON_PEEP
#,RS_BAROMETRIC_PRESSURE
#,RS_PATIENT_TEMPERATURE
#,RS_MON_PPEAK
#,RS_AMBIENT_AIR_TEMP
#starts_with('RS_FLOW'),
#starts_with('RS_PRESSURE'),
#starts_with('RS_VOLUME'),
#!RS_FLOW_PATTERN
) %>%
mutate(
UtcRequestTime = as.POSIXct(UtcRequestTime, format="%d.%m.%Y %H:%M:%S"),
Seconds = seq.int(from = 30, length.out = NROW(data))
)
plot_data <- pp_data %>%
gather(
key = 'Attribute',
value = 'Measure',
-Seconds,
-UtcRequestTime
) %>%
group_by(
Attribute
) %>%
mutate(
Measure = scale(Measure)
) %>%
ungroup()
ggplot(plot_data, aes(x = Seconds, y = Measure)) +
geom_line() +
xlab(label = plot_data$UtcRequestTime) +
facet_wrap(~Attribute, ncol = 1) +
theme_bw()
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/AI-Trainer')
